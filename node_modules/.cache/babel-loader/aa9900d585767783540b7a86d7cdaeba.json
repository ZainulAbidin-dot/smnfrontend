{"ast":null,"code":"import axios from \"../axios\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from \"../actions/types\";\nimport setAuthToken from \"../utils/setAuthToken\"; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post(\"/api/users\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  };\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //  Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","statusText","status","login","logout"],"sources":["/home/zain/React Projects/V3/V4/Web-Project/client/src/actions/auth.js"],"sourcesContent":["import axios from \"../axios\";\nimport { setAlert } from \"./alert\";\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_PROFILE,\n} from \"../actions/types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register User\nexport const register =\n  ({ name, email, password }) =>\n  async (dispatch) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({ name, email, password });\n\n    try {\n      const res = await axios.post(\"/api/users\", body, config);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: { msg: err.response.statusText, status: err.response.status },\n      });\n    }\n  };\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//  Logout / Clear Profile\nexport const logout = () => (dispatch) => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}